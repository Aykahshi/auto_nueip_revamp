---
description: 
globs: 
alwaysApply: false
---
# Project Structure Guide

This is a Flutter project utilizing a layered architecture inspired by Clean Architecture.

## Key Files & Directories

- **`pubspec.yaml`**: [pubspec.yaml](mdc:pubspec.yaml) - Project configuration and dependencies.
- **`lib/`**: [lib](mdc:lib) - Contains the main Dart source code.
  - **`main.dart`**: [lib/main.dart](mdc:lib/main.dart) - The application entry point, initializes dependencies using `Circus` from `joker_state`.
  - **`index.dart`**: [lib/index.dart](mdc:lib/index.dart) - Sets up the root `App` widget, including theme and screen utilities.
  - **`core/`**: [lib/core](mdc:lib/core) - Shared components, utilities, constants, base classes, configuration, routing ([`AppRouter`](mdc:lib/core/router/app_router.dart)), and theme setup.
  - **`data/`**: [lib/data](mdc:lib/data) - Data layer containing repositories (`*_repository_impl.dart`), data sources/services (`*_service.dart`), models, and API client logic ([`ApiClient`](mdc:lib/core/network/api_client.dart)).
  - **`domain/`**: [lib/domain](mdc:lib/domain) - Domain layer likely containing business logic, use cases, and entities (requires further inspection).
  - **`presentation/`**: [lib/presentation](mdc:lib/presentation) - Presentation layer containing UI widgets and presenters (`*_presenter.dart`) which manage UI state using `joker_state`.
- **`test/`**: [test](mdc:test) - Contains unit and widget tests.
- **`android/`**: [android](mdc:android) - Android platform-specific code.
- **`ios/`**: [ios](mdc:ios) - iOS platform-specific code.
- **`assets/`**: [assets](mdc:assets) - Contains static assets like images and fonts.

